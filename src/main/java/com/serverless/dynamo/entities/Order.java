package com.serverless.dynamo.entities;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedJson;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.serverless.dynamo.DynamoDBAdapter;

@DynamoDBTable(tableName = "PLACEHOLDER_ORDER_TABLE_NAME")
public class Order {

	private static final String ORDER_TABLE_NAME = System.getenv("ORDER_TABLE");
	private final Log logger = LogFactory.getLog(this.getClass());

	private static DynamoDBAdapter db_adapter;
	private final AmazonDynamoDB client;
	private final DynamoDBMapper mapper;

	@DynamoDBRangeKey(attributeName = "id")
	//@DynamoDBAutoGeneratedKey
	private String id;
	@DynamoDBHashKey(attributeName = "custId")
	private String custId;
	@DynamoDBAttribute(attributeName = "orderDetails")
	private String orderDetails;
	@DynamoDBAttribute(attributeName = "noOfItems")
	private String noOfItems;
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy HH:mm:ss")
	@DynamoDBAttribute(attributeName = "orderDate")
	private Date orderDate;

	@DynamoDBTypeConvertedJson
	private List<Product> products;
	@SuppressWarnings("static-access")
	public Order() {
		DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
				.withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ORDER_TABLE_NAME)).build();
		this.db_adapter = DynamoDBAdapter.getInstance();
		this.client = this.db_adapter.getDbClient();
		this.mapper = this.db_adapter.createDbMapper(mapperConfig);
	}

	// methods
	public Boolean ifTableExists() {
		return this.client.describeTable(ORDER_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
	}

	public List<Order> list() throws IOException {
		DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
		List<Order> results = this.mapper.scan(Order.class, scanExp);
		for (Order o : results) {
			logger.info("Orders - list(): " + o.toString());
		}
		return results;
	}

	public List<Order> getAllByCustomerId(String custId) {

		List<Order> orders = new ArrayList<>();

		HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
		av.put(":v1", new AttributeValue().withS(custId));

		DynamoDBQueryExpression<Order> queryExp = new DynamoDBQueryExpression<Order>()
				.withKeyConditionExpression("custId = :v1").withExpressionAttributeValues(av);

		orders = this.mapper.query(Order.class, queryExp);

		return orders;

	}

	public Order get(String id) throws IOException {
		Order order = null;
		HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
		av.put(":v1", new AttributeValue().withS(id));

		DynamoDBQueryExpression<Order> queryExp = new DynamoDBQueryExpression<Order>()
				.withKeyConditionExpression("id = :v1").withExpressionAttributeValues(av);

		PaginatedQueryList<Order> result = this.mapper.query(Order.class, queryExp);
		if (result.size() > 0) {
			order = result.get(0);
			logger.info("Orders - get(): order - " + order.toString());
		} else {
			logger.info("Orders - get(): order - Not Found.");
		}
		return order;
	}

	public Order get(String custId, String orderId) {
		Order order = null;
		HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
		av.put(":v1", new AttributeValue().withS(orderId));
		av.put(":v2", new AttributeValue().withS(custId));

		DynamoDBQueryExpression<Order> queryExp = new DynamoDBQueryExpression<Order>()
				.withKeyConditionExpression("id = :v1 and custId = :v2").withExpressionAttributeValues(av);

		PaginatedQueryList<Order> result = this.mapper.query(Order.class, queryExp);
		if (result.size() > 0) {
			order = result.get(0);
			logger.info("Orders - get(): order - " + order.toString());
		} else {
			logger.info("Orders - get(): order - Not Found.");
		}
		return order;
	}

	public void save(Order order) throws IOException {
		logger.info("Orders - save(): " + order.toString());
		this.mapper.save(order);
	}

	public Boolean delete(String id) throws IOException {
		Order order = get(id);
		if (id != null) {
			logger.info("Orders - delete(): " + order.toString());
			this.mapper.delete(id);
		} else {
			logger.info("Orders - delete(): order - does not exist.");
			return false;
		}
		return true;
	}

	public Boolean deleteByCustId(String custId, String orderId) {

		Order order = get(custId, orderId);
		if (order != null)
			this.mapper.delete(order);
		else
			return false;

		return true;
	}

	/**
	 * @return the id
	 */
	public String getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * @return the custId
	 */
	public String getCustId() {
		return custId;
	}

	/**
	 * @param custId the custId to set
	 */
	public void setCustId(String custId) {
		this.custId = custId;
	}

	/**
	 * @return the orderDetails
	 */
	public String getOrderDetails() {
		return orderDetails;
	}

	/**
	 * @param orderDetails the orderDetails to set
	 */
	public void setOrderDetails(String orderDetails) {
		this.orderDetails = orderDetails;
	}

	/**
	 * @return the noOfItems
	 */
	public String getNoOfItems() {
		return noOfItems;
	}

	/**
	 * @param noOfItems the noOfItems to set
	 */
	public void setNoOfItems(String noOfItems) {
		this.noOfItems = noOfItems;
	}

	/**
	 * @return the orderDate
	 */
	public Date getOrderDate() {
		return orderDate;
	}

	/**
	 * @param orderDate the orderDate to set
	 */
	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	/**
	 * @return the products
	 */
	public List<Product> getProducts() {
		return products;
	}

	/**
	 * @param products the products to set
	 */
	public void setProducts(List<Product> products) {
		this.products = products;
	}

	@Override
	public String toString() {
		return String.format("Order [id=%s, custId=%s, orderDetails=%s, noOfItems=%s, orderDate=%s, products=%s]", id,
				custId, orderDetails, noOfItems, orderDate, products);
	}

	
}